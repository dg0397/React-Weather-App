{"version":3,"sources":["context/LocationContext.jsx","Components/Header/Header.jsx","Components/Footer/Footer.jsx","Services/getWeatherAPI.js","hooks/useLocationContext.js","Services/geolocation.js","Components/Waiting/Waiting.jsx","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","LocationContextProvider","children","useState","location","setLocation","loading","setLoading","temperatureUnit","setTemperatureUnit","Provider","value","Header","Footer","href","target","rel","getWeatherAPI","latitude","longitude","setState","setStatus","fetch","then","data","json","coord","name","sys","weather","main","visibility","wind","dt","mainDescription","icon","sunrise","sunset","weatherData","country","temp","detailData","feels_like","humidity","temp_max","temp_min","deg","speed","lon","lat","console","log","useLocationContext","useContext","LocationContext","useEffect","callback","navigator","geolocation","getCurrentPosition","coords","getLocation","Waiting","useLocation","path","setPath","Main","lazy","App","className","fallback","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.30823a67.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst Context = React.createContext({});\r\n\r\nexport function LocationContextProvider({ children }) {\r\n    const [location, setLocation] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [temperatureUnit,setTemperatureUnit] = useState(\"C\");\r\n\r\n    return (\r\n        <Context.Provider value={{ location, setLocation , loading ,setLoading , temperatureUnit, setTemperatureUnit }}>\r\n            {children}\r\n        </Context.Provider>\r\n    )\r\n}\r\n\r\nexport default Context;","import React from 'react';\r\nimport './Header.css'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <h1>Weather App</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from \"react\";\r\nimport './Footer.css'\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <p>Coded by <a href=\"https://github.com/dg0397\" target = \"_blank\" rel=\"noopener noreferrer\">DG0397</a></p>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","export default function getWeatherAPI(latitude,longitude,setState,setStatus){\r\n    setStatus(true)\r\n    fetch(`https://fcc-weather-api.glitch.me/api/current?lat=${latitude}&lon=${longitude}`)\r\n        .then(data => data.json())\r\n        .then(location => {\r\n            const {coord,name,sys,weather,main,visibility,wind,dt} = location;\r\n\r\n            const {main:mainDescription,icon} = weather[0];\r\n            const {sunrise,sunset,country} = sys;\r\n            const {temp,feels_like,humidity,temp_max,temp_min} = main;\r\n            const {deg,speed} = wind;\r\n            const {lon,lat} = coord;\r\n\r\n            const detailData = {sunrise,sunset,feels_like,humidity,temp_max,temp_min,visibility,deg,speed,lon,lat,dt}\r\n            const weatherData = {coord,name,country,mainDescription,temp,icon,detailData};\r\n            console.log(location)\r\n            setState(weatherData)\r\n            setStatus(false);\r\n        })\r\n}","import { useEffect, useContext } from 'react';\r\nimport LocationContext from '../context/LocationContext';\r\nimport getWeatherAPI from '../Services/getWeatherAPI'\r\nimport getLocation from '../Services/geolocation';\r\n\r\nexport default function useLocationContext() {\r\n    const { location, setLocation, loading, setLoading } = useContext(LocationContext);\r\n\r\n    useEffect(() => {\r\n        getLocation(getWeatherAPI, setLocation, setLoading);\r\n    }, [setLocation, setLoading])\r\n\r\n    return { location, loading }\r\n}","export default function getLocation(callback,setState,setStatus){\r\n    if(navigator.geolocation){\r\n        navigator.geolocation.getCurrentPosition( (location)=> {\r\n            const {coords} = location;\r\n            const {latitude,longitude} = coords;\r\n            callback(latitude,longitude,setState,setStatus)\r\n        })\r\n    }else{\r\n        return \"Geolocation is not supported by this browser.\"\r\n    }\r\n}\r\n","import React from 'react'\r\nimport useLocationContext from '../../hooks/useLocationContext';\r\nimport './Waiting.css'\r\nimport {useLocation} from 'wouter';\r\n\r\nexport default function Waiting(){\r\n    useLocationContext()\r\n    const [path,setPath] = useLocation();\r\n    if(path !== '/'){\r\n      setPath('/')\r\n    }\r\n    return(\r\n      <h1>Wait a minute...</h1>\r\n    )\r\n}","import React, { Suspense } from 'react';\r\nimport './App.css';\r\n\r\nimport Header from './Components/Header/Header';\r\n\r\nimport Footer from './Components/Footer/Footer';\r\n\r\n\r\nimport { LocationContextProvider } from './context/LocationContext';\r\nimport Waiting from './Components/Waiting/Waiting';\r\n\r\n\r\n\r\nconst Main = React.lazy(\r\n  () => import('./Components/Main/Main')\r\n)\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <LocationContextProvider>\r\n        <Suspense fallback = {<Waiting/>}  >\r\n          <Main/>\r\n        </Suspense>\r\n      </LocationContextProvider>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}